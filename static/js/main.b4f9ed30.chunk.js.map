{"version":3,"sources":["operations.js","utils.js","Calculator.js","App.js","reportWebVitals.js","index.js"],"names":["operators","operation","id","clear","equals","digits","numberRegExp","operatorRegExp","formulaRegExp","isFormula","formula","test","formulaWithoutOperatorsAtTheEnd","replace","calculateFormula","result","tree","length","parseFloat","preprocessedTree","i","prevValue","pop","push","String","Math","abs","Number","EPSILON","NaN","res","calculate","number","match","operator","parseFormula","isInteger","toFixed","Calculator","props","state","startNew","hasResult","canBeNegative","lastIsOperator","event","current","target","value","currentFormula","this","setState","substring","class","map","x","onClick","handleDigits","bind","style","gridArea","handleOperators","handleClear","handleEquals","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4f9ed30.chunk.js","sourcesContent":["export const operators = [\r\n    {\r\n        operation: '+',\r\n        id: 'add'\r\n    },\r\n    {\r\n        operation: '-',\r\n        id: 'subtract'\r\n    },\r\n    {\r\n        operation: '*',\r\n        id: 'multiply'\r\n    },\r\n    {\r\n        operation: '/',\r\n        id: 'divide'\r\n    },\r\n    {\r\n        operation: '.',\r\n        id: 'decimal'\r\n    }\r\n];\r\n\r\nexport const clear = {\r\n    operation: 'c l e a r',\r\n    id: 'clear'\r\n};\r\n\r\nexport const equals = {\r\n    operation: '=',\r\n    id: 'equals'\r\n};\r\n\r\nexport const digits = [\r\n    {\r\n        operation: '0',\r\n        id: 'zero'\r\n    },\r\n    {\r\n        operation: '1',\r\n        id: 'one'\r\n    },\r\n    {\r\n        operation: '2',\r\n        id: 'two'\r\n    },\r\n    {\r\n        operation: '3',\r\n        id: 'three'\r\n    },\r\n    {\r\n        operation: '4',\r\n        id: 'four'\r\n    },\r\n    {\r\n        operation: '5',\r\n        id: 'five'\r\n    },\r\n    {\r\n        operation: '6',\r\n        id: 'six'\r\n    },\r\n    {\r\n        operation: '7',\r\n        id: 'seven'\r\n    },\r\n    {\r\n        operation: '8',\r\n        id: 'eight'\r\n    },\r\n    {\r\n        operation: '9',\r\n        id: 'nine'\r\n    }\r\n];\r\n","const numberRegExp = /(-)?([0](\\.\\d{1,4})?|([1-9]+\\d*)(\\.\\d{1,4})?)/;\r\nconst operatorRegExp = /(\\+|-|\\/|\\*){1,1}/;\r\nconst formulaRegExp = /^(-)?([0]{1,1}(\\.\\d{1,4})?|([1-9]+\\d*)(\\.\\d{1,4})?)((\\+|-|\\/|\\*){1,1}(-)?([0]{1,1}(\\.\\d{1,4})?|([1-9]+\\d*)(\\.\\d{1,4})?))*$/;\r\n\r\nexport function isFormula (formula) {\r\n    return formulaRegExp.test(formula);\r\n}\r\n\r\nexport function formulaWithoutOperatorsAtTheEnd(formula) {\r\n    return formula.replace(/(\\.|\\+|\\*|\\/|-)*$/, '');\r\n}\r\n\r\nfunction parseFormula(formula) {\r\n    let tree = [];\r\n    while (formula.length !== 0) {\r\n        var number = formula.match(numberRegExp);\r\n        if (number) {\r\n            tree.push(number[0]);\r\n            formula = formula.replace(number[0], \"\");\r\n        }\r\n\r\n        var operator = formula.match(operatorRegExp);\r\n        if (operator) {\r\n            tree.push(operator[0]);\r\n            formula = formula.replace(operator[0], \"\");\r\n        }\r\n    }\r\n    return tree;\r\n}\r\n\r\nfunction calculate(tree) {\r\n\r\n    if (tree.length < 3)\r\n        return parseFloat(tree[0]);\r\n\r\n    // process the '*' and '/' operations first\r\n    let preprocessedTree = [tree[0]];\r\n\r\n    for (let i = 1; i < tree.length;) {\r\n        if (tree[i] === \"*\") {\r\n            let prevValue = parseFloat(preprocessedTree.pop());\r\n            preprocessedTree.push(String(prevValue * parseFloat(tree[i + 1])));\r\n            i = i + 2;\r\n        }\r\n        else if (tree[i] === \"/\") {\r\n\r\n            if (Math.abs(parseFloat(tree[i + 1])) < Number.EPSILON) // division by zero \r\n                return NaN;\r\n\r\n            let prevValue = parseFloat(preprocessedTree.pop());\r\n            preprocessedTree.push(String(prevValue / parseFloat(tree[i + 1])));\r\n            i = i + 2;\r\n        }\r\n        else {\r\n            preprocessedTree.push(tree[i]);\r\n            i = i + 1;\r\n        }\r\n    }\r\n\r\n    // process the '+' and '-' operations\r\n    let res = parseFloat(preprocessedTree[0]);\r\n\r\n    for (let i = 1; i < preprocessedTree.length;) {\r\n        if (preprocessedTree[i] === \"+\") {\r\n            res = res + parseFloat(preprocessedTree[i + 1]);\r\n            i = i + 2;\r\n        }\r\n        else if (preprocessedTree[i] === \"-\") {\r\n            res = res - parseFloat(preprocessedTree[i + 1]);\r\n            i = i + 2;\r\n        }\r\n        else\r\n            return NaN;\r\n    }\r\n    return res;\r\n}\r\n\r\nexport function calculateFormula (formula) {\r\n    let tree = parseFormula(formula);\r\n    let result = calculate(tree);\r\n    if (!Number.isInteger(result)) { // the floating point result will have precision 4, i.e. 1/3 = 0.3333\r\n        result = Number.parseFloat(result).toFixed(4).replace(/0+$/, '');\r\n    }\r\n    return result;\r\n}","import React from 'react'\r\nimport { operators, clear, equals, digits } from './operations.js'\r\nimport { isFormula, calculateFormula, formulaWithoutOperatorsAtTheEnd } from './utils.js'\r\n\r\nclass Calculator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      formula: \"0\",\r\n      startNew: true,\r\n      hasResult: false,\r\n      canBeNegative: true,\r\n      lastIsOperator: false\r\n    };\r\n  }\r\n\r\n  handleOperators(event) {\r\n    const current = event.target.value;\r\n    let currentFormula = this.state.formula + current;\r\n\r\n    if (this.state.startNew) {\r\n      if (this.state.hasResult) // new formula has the previous result as the starting digits\r\n        this.setState({ formula: currentFormula, startNew: false, hasResult: true, canBeNegative: false, lastIsOperator: true });\r\n      else // new formula starts with the current digit\r\n        this.setState({ formula: current, startNew: false, hasResult: true, canBeNegative: false, lastIsOperator: true });\r\n      return;\r\n    }\r\n\r\n    if (!this.state.lastIsOperator) {\r\n      this.setState({ formula: currentFormula, startNew: false, hasResult: true, canBeNegative: current !== '.', lastIsOperator: true });\r\n      return;\r\n    }\r\n\r\n    if (current !== '-') {// we use the last entered operation\r\n      currentFormula = formulaWithoutOperatorsAtTheEnd(this.state.formula) + current;\r\n      this.setState({ formula: currentFormula, startNew: false, hasResult: true, canBeNegative: current !== '-', lastIsOperator: true });\r\n      return;\r\n    }\r\n\r\n    const prevElement = this.state.formula[this.state.formula.length - 1];\r\n    if (prevElement !== '-') {\r\n      this.setState({ formula: currentFormula, startNew: false, hasResult: true, canBeNegative: false, lastIsOperator: true });\r\n      return;\r\n    }\r\n\r\n    if (this.state.canBeNegative)\r\n      this.setState({ formula: currentFormula, startNew: false, hasResult: true, canBeNegative: false, lastIsOperator: true });\r\n    else {\r\n      currentFormula = formulaWithoutOperatorsAtTheEnd(this.state.formula) + current;\r\n      this.setState({ formula: currentFormula, startNew: false, hasResult: true, canBeNegative: true, lastIsOperator: true });\r\n    }\r\n  }\r\n\r\n  handleDigits(event) {\r\n    const current = event.target.value;\r\n\r\n    if (this.state.startNew) {// starting a new formula with the current digit\r\n      this.setState({ formula: current, startNew: false, hasResult: true, canBeNegative: true, lastIsOperator: false });\r\n      return;\r\n    }\r\n\r\n    let currentFormula = this.state.formula + current; //adding the new digit to the formula\r\n    if (isFormula(currentFormula)) {\r\n      this.setState({ formula: currentFormula, startNew: false, hasResult: true, canBeNegative: true, lastIsOperator: false });\r\n      return;\r\n    }\r\n\r\n    // if regexp failed and the previous symbol is '.', we remove the '.'\r\n    if (this.state.formula.length > 1 && this.state.formula[this.state.formula.length - 1] === \".\") {\r\n      let formulaButLast = this.state.formula.substring(0, this.state.formula.length - 1);\r\n      currentFormula = formulaButLast + current;\r\n      if (isFormula(currentFormula))\r\n        this.setState({ formula: currentFormula, startNew: false, hasResult: true, canBeNegative: true, lastIsOperator: false });\r\n    }\r\n  }\r\n\r\n  handleClear() {\r\n    this.setState({ formula: \"0\", startNew: true, canBeNegative: true, hasResult: false, lastIsOperator: false });\r\n  }\r\n\r\n  handleEquals() {\r\n    if (!isFormula(this.state.formula)) { //cannot calculate, return NaN as result\r\n      this.setState({ formula: NaN, startNew: true, hasResult: false, canBeNegative: true, lastIsOperator: false });\r\n      return;\r\n    }\r\n\r\n    let result = calculateFormula(this.state.formula);\r\n    this.setState({ formula: result, startNew: true, hasResult: true, canBeNegative: true, lastIsOperator: false });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"calculator\">\r\n        <div id=\"display\">{this.state.formula}</div>\r\n        <div class=\"grid-container\">\r\n          {digits.map((x, i) => {\r\n            return (\r\n              <button onClick={this.handleDigits.bind(this)} value={x.operation} id={x.id} style={{ gridArea: x.id }}>{x.operation}</button>\r\n            )\r\n          })}\r\n          {operators.map((x, i) => {\r\n            return (\r\n              <button onClick={this.handleOperators.bind(this)} value={x.operation} id={x.id} style={{ gridArea: x.id }}>{x.operation}</button>\r\n            )\r\n          })}\r\n          <button onClick={this.handleClear.bind(this)} id={clear.id} style={{ gridArea: clear.id }}>{clear.operation}</button>\r\n          <button onClick={this.handleEquals.bind(this)} id={equals.id} style={{ gridArea: equals.id }}>{equals.operation}</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;","import './App.css';\nimport Calculator from './Calculator'\n\nfunction App() {\n  return (\n    <div class=\"container-fluid\">\n      <div id=\"zero-wrapper\">\n        <div id=\"wrapper\">\n          <div class=\"wrapper-glare top\"></div>\n          <div id=\"root-div\">\n            <Calculator />\n          </div>\n          <div class=\"wrapper-glare bottom\"></div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}